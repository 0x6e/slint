/* LICENSE BEGIN

    This file is part of the Sixty FPS Project

    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only

LICENSE END */
TestCase := Rectangle {
    signal test_signal;
    signal test_signal2;
    signal test_signal3;
    property<int> signal_emission_count;
    test_signal => { signal_emission_count += 1; }
    test_signal2 => {  signal_emission_count = 88; root.test_signal3(); }
}
/*
```cpp
TestCase instance;
int signal_3_emited = 0;
instance.on_test_signal3([&]{ signal_3_emited++; });
instance.set_signal_emission_count(0);
assert(instance.get_signal_emission_count() == 0);
instance.emit_test_signal();
assert(instance.get_signal_emission_count() == 1);
instance.emit_test_signal();
assert(instance.get_signal_emission_count() == 2);
assert(signal_3_emited == 0);
instance.emit_test_signal2();
assert(instance.get_signal_emission_count() == 88);
assert(signal_3_emited == 1);
```


```rust
let instance = TestCase::new();
let instance = instance.as_ref();
let signal_3_emited = std::rc::Rc::new(std::cell::Cell::new(0));
instance.on_test_signal3({
    let signal_3_emited = signal_3_emited.clone();
    move || signal_3_emited.set(signal_3_emited.get() + 1)
});
instance.set_signal_emission_count(0);
assert_eq!(instance.get_signal_emission_count(), 0);
instance.emit_test_signal();
assert_eq!(instance.get_signal_emission_count(), 1);
instance.emit_test_signal();
assert_eq!(instance.get_signal_emission_count(), 2);
assert_eq!(signal_3_emited.get(), 0);
instance.emit_test_signal2();
assert_eq!(instance.get_signal_emission_count(), 88);
assert_eq!(signal_3_emited.get(), 1);
```

```js
var signal_3_emited = 0;
var instance = new sixtyfps.TestCase({
    test_signal3: function() { signal_3_emited++; }
});
instance.signal_emission_count = 0;
assert.equal(instance.signal_emission_count, 0);
instance.test_signal();
assert.equal(instance.signal_emission_count, 1);
let x = instance.test_signal;
assert.equal(instance.signal_emission_count, 1);
x()
assert.equal(instance.signal_emission_count, 2);
assert.equal(signal_3_emited, 0);
instance.test_signal2();
assert.equal(instance.signal_emission_count, 88);
assert.equal(signal_3_emited, 1);
```
*/

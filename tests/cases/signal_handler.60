TestCase := Rectangle {
    signal test_signal;
    signal test_signal2;
    property<int32> signal_emission_count;
    test_signal => { signal_emission_count += 1; }
    test_signal2 => { signal_emission_count = 88; }
}
/*
```cpp
TestCase instance;
instance.set_signal_emission_count(0);
assert(instance.get_signal_emission_count() == 0);
instance.emit_test_signal();
assert(instance.get_signal_emission_count() == 1);
instance.emit_test_signal();
assert(instance.get_signal_emission_count() == 2);
instance.emit_test_signal2();
assert(instance.get_signal_emission_count() == 88);

```


```rust
let instance = TestCase::new();
let instance = instance.as_ref();
instance.set_signal_emission_count(0);
assert_eq!(instance.get_signal_emission_count(), 0);
instance.emit_test_signal();
assert_eq!(instance.get_signal_emission_count(), 1);
instance.emit_test_signal();
assert_eq!(instance.get_signal_emission_count(), 2);
instance.emit_test_signal2();
assert_eq!(instance.get_signal_emission_count(), 88);
```

```js
var instance = new sixtyfps.TestCase({});
instance.signal_emission_count = 0;
assert.equal(instance.signal_emission_count, 0);
instance.test_signal();
assert.equal(instance.signal_emission_count, 1);
let x = instance.test_signal;
assert.equal(instance.signal_emission_count, 1);
x()
assert.equal(instance.signal_emission_count, 2);
instance.test_signal2();
assert.equal(instance.signal_emission_count, 88);
```
*/

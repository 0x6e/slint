TestCase := Rectangle {
    property<length> l1: 12px;
    property<length> l2: 12lx;
    property<length> l3: 100px + 12lx;
    property<length> l4: 120 * 1px;

    property<logical_length> ll1: 12px;
    property<logical_length> ll2: 12lx;
    property<logical_length> ll3: 100px + 12lx;
    property<logical_length> ll4: 120 * 1px;

    property<bool> value: l1 == 10px + 2px;
}


/*

```cpp
TestCase instance;
float ratio = 1.;
assert(instance.get_l1() == 12.);
assert(instance.get_l2() == 12. * ratio);
assert(instance.get_l3() == 100. + 12. * ratio);
assert(instance.get_l4() == 120.);

assert(instance.get_ll1() * ratio == 12.);
assert(instance.get_ll2() * ratio == 12. * ratio);
assert(instance.get_ll3() * ratio == 100. + 12. * ratio);
assert(instance.get_ll4() * ratio == 120.);

assert(instance.get_value());

ratio = 2.;
instance.dpi.set(ratio);
assert(instance.get_l1() == 12.);
assert(instance.get_l2() == 12. * ratio);
assert(instance.get_l3() == 100. + 12. * ratio);
assert(instance.get_l4() == 120.);

assert(instance.get_ll1() * ratio == 12.);
assert(instance.get_ll2() * ratio == 12. * ratio);
assert(instance.get_ll3() * ratio == 100. + 12. * ratio);
assert(instance.get_ll4() * ratio == 120.);

assert(instance.get_value());
```


```rust
let ratio = 1.;
let instance = TestCase::new();
let instance = instance.as_ref();
assert_eq!(instance.get_l1(), 12.);
assert_eq!(instance.get_l2(), 12. * ratio);
assert_eq!(instance.get_l3(), 100. + 12. * ratio);
assert_eq!(instance.get_l4(), 120.);

assert_eq!(instance.get_ll1() * ratio, 12.);
assert_eq!(instance.get_ll2() * ratio, 12. * ratio);
assert_eq!(instance.get_ll3() * ratio, 100. + 12. * ratio);
assert_eq!(instance.get_ll4() * ratio, 120.);

assert!(instance.get_value());

let ratio = 2.;
instance.dpi.set(ratio);
assert_eq!(instance.get_l1(), 12.);
assert_eq!(instance.get_l2(), 12. * ratio);
assert_eq!(instance.get_l3(), 100. + 12. * ratio);
assert_eq!(instance.get_l4(), 120.);

assert_eq!(instance.get_ll1() * ratio, 12.);
assert_eq!(instance.get_ll2() * ratio, 12. * ratio);
assert_eq!(instance.get_ll3() * ratio, 100. + 12. * ratio);
assert_eq!(instance.get_ll4() * ratio, 120.);

assert!(instance.get_value());
```

```js
// FIXME: test with different ratio
var ratio = 1;
var instance = new sixtyfps.TestCase({});
assert.equal(instance.l1, 12.);
assert.equal(instance.l2, 12. * ratio);
assert.equal(instance.l3, 100. + 12 * ratio);
assert.equal(instance.l4, 120.);

assert.equal(instance.ll1 * ratio, 12.);
assert.equal(instance.ll2 * ratio, 12. * ratio);
assert.equal(instance.ll3 * ratio, 100. + 12. * ratio);
assert.equal(instance.ll4 * ratio, 120.);

assert(instance.value);
```

*/
/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */
TestCase := Rectangle {
    property<length> l1: 12phx;
    property<length> l2: 12px;
    property<length> l3: 100phx + 12px;
    property<length> l4: 120 * 1phx;

    property<logical_length> ll1: 12phx;
    property<logical_length> ll2: 12px;
    property<logical_length> ll3: 100phx + 12px;
    property<logical_length> ll4: 120 * 1phx;

    property<bool> value: l1 == 10phx + 2phx;
}


/*

```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;
float ratio = 1.;
assert_eq(instance.get_l1(), 12.);
assert_eq(instance.get_l2(), 12. * ratio);
assert_eq(instance.get_l3(), 100. + 12. * ratio);
assert_eq(instance.get_l4(), 120.);

assert_eq(instance.get_ll1() * ratio, 12.);
assert_eq(instance.get_ll2() * ratio, 12. * ratio);
assert_eq(instance.get_ll3() * ratio, 100. + 12. * ratio);
assert_eq(instance.get_ll4() * ratio, 120.);

assert(instance.get_value());

ratio = 2.;
instance.window.set_scale_factor(ratio);
assert_eq(instance.get_l1(), 12.);
assert_eq(instance.get_l2(), 12. * ratio);
assert_eq(instance.get_l3(), 100. + 12. * ratio);
assert_eq(instance.get_l4(), 120.);

assert_eq(instance.get_ll1() * ratio, 12.);
assert_eq(instance.get_ll2() * ratio, 12. * ratio);
assert_eq(instance.get_ll3() * ratio, 100. + 12. * ratio);
assert_eq(instance.get_ll4() * ratio, 120.);

assert(instance.get_value());
```


```rust
let ratio = 1.;
let instance = TestCase::new();
assert_eq!(instance.get_l1(), 12.);
assert_eq!(instance.get_l2(), 12. * ratio);
assert_eq!(instance.get_l3(), 100. + 12. * ratio);
assert_eq!(instance.get_l4(), 120.);

assert_eq!(instance.get_ll1() * ratio, 12.);
assert_eq!(instance.get_ll2() * ratio, 12. * ratio);
assert_eq!(instance.get_ll3() * ratio, 100. + 12. * ratio);
assert_eq!(instance.get_ll4() * ratio, 120.);

assert!(instance.get_value());

let ratio = 2.;
instance.as_ref().window.set_scale_factor(ratio);
assert_eq!(instance.get_l1(), 12.);
assert_eq!(instance.get_l2(), 12. * ratio);
assert_eq!(instance.get_l3(), 100. + 12. * ratio);
assert_eq!(instance.get_l4(), 120.);

assert_eq!(instance.get_ll1() * ratio, 12.);
assert_eq!(instance.get_ll2() * ratio, 12. * ratio);
assert_eq!(instance.get_ll3() * ratio, 100. + 12. * ratio);
assert_eq!(instance.get_ll4() * ratio, 120.);

assert!(instance.get_value());
```

```js
// FIXME: test with different ratio
var ratio = 1;
var instance = new sixtyfps.TestCase({});
assert.equal(instance.l1, 12.);
assert.equal(instance.l2, 12. * ratio);
assert.equal(instance.l3, 100. + 12 * ratio);
assert.equal(instance.l4, 120.);

assert.equal(instance.ll1 * ratio, 12.);
assert.equal(instance.ll2 * ratio, 12. * ratio);
assert.equal(instance.ll3 * ratio, 100. + 12. * ratio);
assert.equal(instance.ll4 * ratio, 120.);

assert(instance.value);
```

*/
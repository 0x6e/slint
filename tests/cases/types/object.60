/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */

TestCase := Rectangle {
    property<{a: string, b: int}> foo: {a : "444", b: 12 };
    property<{a: string, b: int}> obj_conversion: { b: 12, a : 444, c: "nothing" };
    property<{a: string, b: int}> obj_conversion2: { a: "hello" };
    property<{a: string, b: int}> obj_cond: true ? { b: 12, a : "ddd" } :  { a: 12, b : 444, c: "nothing" };

    property<string> foo_a : foo.a;
    property<int> foo_b : foo.b;
    signal change_foo;
    change_foo => {
        foo.a = obj_conversion2.a;
        foo.b += 8 + obj_conversion2.b;
    }
}


/*
```rust
let instance = TestCase::new();
let instance = instance.as_ref();
assert_eq!(instance.get_foo_a(), sixtyfps::SharedString::from("444"));
assert_eq!(instance.get_foo_b(), 12);
instance.emit_change_foo();
assert_eq!(instance.get_foo_a(), sixtyfps::SharedString::from("hello"));
assert_eq!(instance.get_foo_b(), 20);

// This API to set with a tuple should maybe not be accessible?
instance.set_foo(("yo".into(), 33));
assert_eq!(instance.get_foo_a(), sixtyfps::SharedString::from("yo"));
assert_eq!(instance.get_foo_b(), 33);

```

```cpp
TestCase instance;
assert_eq(instance.get_foo_a(), sixtyfps::SharedString("444"));
assert_eq(instance.get_foo_b(), 12);
instance.emit_change_foo();
assert_eq(instance.get_foo_a(), sixtyfps::SharedString("hello"));
assert_eq(instance.get_foo_b(), 20);

// This API to set with a tuple should maybe not be accessible?
instance.set_foo(std::make_tuple(sixtyfps::SharedString("yo"), 33));
assert_eq(instance.get_foo_a(), sixtyfps::SharedString("yo"));
assert_eq(instance.get_foo_b(), 33);
```


```js
var instance = new sixtyfps.TestCase({});
assert.equal(instance.foo_a, ("444"));
assert.equal(instance.foo_b, 12);
instance.change_foo();
assert.equal(instance.foo_a, "hello");
assert.equal(instance.foo_b, 20);

instance.foo = { a: "yo", b: 33 };
assert.equal(instance.foo_a, "yo");
assert.equal(instance.foo_b, 33);
```
*/
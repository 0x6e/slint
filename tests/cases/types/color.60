/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */
Test := Rectangle {
    property<color> b1: blue;
    property<color> b2: #00f;
    property<color> b3: #0000ff;
    property<color> b4: #00ff;
    property<color> b5: #0000ffff;
    property<color> r1: red;
    property<color> r2: #f00;
    property<color> r3: #ff0000;
    property<color> r4: #f00f;
    property<color> r5: #ff0000ff;
    property<color> r6: #ff335588;

    property<color> y1: yellow;
    property<color> y2: #ff0;

    property<color> g1: #999;
}

/*
```cpp
auto handle = Test::create();
const Test &t = *handle;
assert_eq(t.get_r1(), t.get_r2());
assert_eq(t.get_r1(), t.get_r3());
assert_eq(t.get_r1(), t.get_r4());
assert_eq(t.get_r1(), t.get_r5());
assert_eq(t.get_b1(), t.get_b2());
assert_eq(t.get_b1(), t.get_b3());
assert_eq(t.get_b1(), t.get_b4());
assert_eq(t.get_b1(), t.get_b5());
assert(t.get_b1() != t.get_r5());
assert_eq(t.get_y1(), t.get_y2());

assert_eq(t.get_r6().alpha(), 0x88);
assert_eq(t.get_r6().red(), 0xff);
assert_eq(t.get_r6().green(), 0x33);
assert_eq(t.get_r6().blue(), 0x55);

auto red = sixtyfps::Color::from_argb_float(1, 1, 0, 0);
auto blue = sixtyfps::Color::from_rgb_float(0, 0, 1);
auto g = sixtyfps::Color::from_rgb_uint8(0x99, 0x99, 0x99);
assert_eq(t.get_r1(), red);
assert_eq(t.get_b1(), blue);
assert_eq(t.get_g1(), g);
assert_eq(t.get_y1(), sixtyfps::Color::from_argb_encoded(0xffffff00));

t.set_g1(blue);
assert_eq(t.get_g1(), t.get_b1());
```


```rust
let t = Test::new();
let t = t.as_ref();
assert_eq!(t.get_r1(), t.get_r2());
assert_eq!(t.get_r1(), t.get_r3());
assert_eq!(t.get_r1(), t.get_r4());
assert_eq!(t.get_r1(), t.get_r5());
assert_eq!(t.get_b1(), t.get_b2());
assert_eq!(t.get_b1(), t.get_b3());
assert_eq!(t.get_b1(), t.get_b4());
assert_eq!(t.get_b1(), t.get_b5());
assert_ne!(t.get_b1(), t.get_r5());
assert_eq!(t.get_y1(), t.get_y2());

assert_eq!(t.get_r6().alpha(), 0x88);
assert_eq!(t.get_r6().red(), 0xff);
assert_eq!(t.get_r6().green(), 0x33);
assert_eq!(t.get_r6().blue(), 0x55);

let red = sixtyfps::Color::from_argb_f32(1., 1., 0., 0.);
let blue = sixtyfps::Color::from_rgb_f32(0., 0., 1.);
let g = sixtyfps::Color::from_rgb_u8(0x99, 0x99, 0x99);
assert_eq!(t.get_r1(), red);
assert_eq!(t.get_b1(), blue);
assert_eq!(t.get_g1(), g);
assert_eq!(t.get_y1(), sixtyfps::Color::from_argb_encoded(0xffffff00));

t.set_g1(blue);
assert_eq!(t.get_g1(), t.get_b1());
```

```js
var t = new sixtyfps.Test({});
assert(t.r1 == t.r2);
assert(t.r1 == t.r3);
assert(t.r1 == t.r4);
assert(t.r1 == t.r5);
assert(t.b1 == t.b2);
assert(t.b1 == t.b3);
assert(t.b1 == t.b4);
assert(t.b1 == t.b5);
assert(t.b1 != t.r5);

assert.equal(t.r6, "#ff335588");

let red = "#ff0000ff";
let blue = "#0000ffff";
let g = "#999999ff";
assert.equal(t.r1, red);
assert.equal(t.b1, blue);
assert.equal(t.g1, g);
assert.equal(t.y1, "#ffff00ff");

t.g1 = "blue";
assert.equal(t.g1, t.b1);
t.g1 = "#f00";
assert.equal(t.g1, t.r1);

```
*/


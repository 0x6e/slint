/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */
ExtraComponent := Rectangle {
    for x in [{a: "0"}, {a: "1"}] : Text { text: x.a; }
}


Extra2 := Rectangle {
    property<int> top_level;
    property<int> value;
    callback update_value;
    for aaa[r] in [[10, top_level], [2, 3]] : Rectangle {
        width: parent.width;
        height: root.height;
        for bb[l] in aaa : TouchArea {
            width: 10phx;
            height: 10phx;
            x: r*10phx;
            y: l*10phx;
            clicked => {
                root.value += bb;
                update_value();
            }
        }
    }
}

export TestCase := Rectangle {
    width: 100phx;
    height: 100phx;
    color: white;
    property<float> top_level: 42;
    property<int> value: 0;

   for pp[idx] in 5: Rectangle {
        s := Rectangle {
            property<length> within: 88phx;
            x: 2phx * idx;
            y: 200phx * pp;
            width: s.within;
            height: root.top_level * 1phx;
            for nested in [1phx] : Rectangle {
                x : s.width + root.top_level * 1phx + nested;
            }
        }
    }

    for pp[idx] in [1,3,2]: Rectangle {
        x: idx * 1phx;
        y: 25phx * pp;
    }

    for pp[idx] in ["1","3","2"]: Rectangle {
        x: idx * 1phx;
        Text { text: pp; }
    }

    for pp in [{a: 12, b: "aa", c: {a: #00f}}, {a: 13, b: "cc", c: { a: #f00}}]: Text {
        x: pp.a * 1phx;
        text: pp.b;
        color: pp.c.a;
        ExtraComponent {
        }
    }
    Extra2 {
        width: parent.width;
        height: root.height;
        top_level: root.top_level;
        update_value => {
            root.value = self.value;
        }
    }

    property<[{a: int}]> m;
    for x in m : TouchArea {
        width: parent.width;
        height: root.height;
        clicked => {
            root.value = x.a;
        }
    }
}



/*
```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;

sixtyfps::testing::send_mouse_click(&instance, 5., 5.);
assert_eq(instance.get_value(), 10);

sixtyfps::testing::send_mouse_click(&instance, 15., 15.);
assert_eq(instance.get_value(), 13);

sixtyfps::testing::send_mouse_click(&instance, 5., 15.);
assert_eq(instance.get_value(), 13+42);
```


```rust
let instance = TestCase::new();

sixtyfps::testing::send_mouse_click(&instance, 5., 5.);
assert_eq!(instance.get_value(), 10);

sixtyfps::testing::send_mouse_click(&instance, 15., 15.);
assert_eq!(instance.get_value(), 13);

sixtyfps::testing::send_mouse_click(&instance, 5., 15.);
assert_eq!(instance.get_value(), 13+42);

```

```js
var instance = new sixtyfps.TestCase();
instance.send_mouse_click(5., 5.);
assert.equal(instance.value, 10);

instance.cond1 = true;
instance.send_mouse_click(15., 15.);
assert.equal(instance.value, 13);

instance.cond1 = false;
instance.send_mouse_click(5., 15.);
assert.equal(instance.value, 13+42);
```
*/



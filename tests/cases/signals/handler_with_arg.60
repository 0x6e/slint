/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */
TestCase := Rectangle {
    signal test_signal(int);
    signal test_signal2(string);
    signal test_signal3(int, string);
    property<int> signal_emission_count;
    test_signal => { signal_emission_count += 1; }
    test_signal2(xx) => { signal_emission_count = 88; root.test_signal3(55, xx); }
}

/*

```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;
int signal_3_emited = 0;
std::string signal_3_string_value;
int signal_3_int_value = 0;
instance.on_test_signal3([&](int a, auto b) {
    signal_3_int_value = a;
    signal_3_string_value = b;
    signal_3_emited ++;
});
instance.set_signal_emission_count(0);
assert_eq(instance.get_signal_emission_count(), 0);
instance.emit_test_signal(42);
assert_eq(instance.get_signal_emission_count(), 1);
assert_eq(signal_3_emited, 0);
instance.emit_test_signal2("hello");
assert_eq(instance.get_signal_emission_count(), 88);
assert_eq(signal_3_emited, 1);
assert_eq(signal_3_int_value, 55);
assert_eq(signal_3_string_value, "hello");
```

```rust
let instance = TestCase::new();
let signal_3_emited = std::rc::Rc::new(std::cell::RefCell::new((0, String::new())));
instance.on_test_signal3({
    let signal_3_emited = signal_3_emited.clone();
    move |a, b|  *signal_3_emited.borrow_mut() = (a, b.into())
});
instance.set_signal_emission_count(0);
assert_eq!(instance.get_signal_emission_count(), 0);
instance.emit_test_signal(42);
assert_eq!(instance.get_signal_emission_count(), 1);
assert_eq!(*signal_3_emited.borrow(), (0, "".into()));
instance.emit_test_signal2("hello".into());
assert_eq!(instance.get_signal_emission_count(), 88);
assert_eq!(*signal_3_emited.borrow(), (55, "hello".into()));
```


```js
var signal_3_emited = 0;
var signal_3_string_value;
var signal_3_int_value;
var instance = new sixtyfps.TestCase({
    test_signal3: function(a, b) {
        signal_3_emited++;
        signal_3_string_value = b;
        signal_3_int_value = a;
    }
});
instance.signal_emission_count = 0;
assert.equal(instance.signal_emission_count, 0);
instance.test_signal(42);
assert.equal(instance.signal_emission_count, 1);
instance.test_signal2("hello");
assert.equal(instance.signal_emission_count, 88);
assert.equal(signal_3_emited, 1);
assert.equal(signal_3_string_value, "hello");
assert.equal(signal_3_int_value, 55);
instance.signal_emission_count = 0;
// Calling a signal with a wrong number of arg
try {
    instance.test_signal();
    assert(false);
} catch(e) {
    assert.equal(e.toString(), "Error: test_signal expect 1 arguments, but 0 where provided");
}
assert.equal(instance.signal_emission_count, 0);


/// also test setHandler
instance.test_signal2.setHandler(function(a) {
    signal_3_emited += 100;
    signal_3_string_value = a;
});
instance.test_signal2("salùt")
assert.equal(signal_3_emited, 101);
assert.equal(signal_3_string_value, "salùt");
assert.equal(signal_3_int_value, 55); // same as before

```



*/


/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */
 TestCase := Rectangle {
    property<int> top_level: 4;
    property<int> active_index: 0;
    property<int> some_prop: 5;
    text1 := Text {
        text: "hello";
        property<int> foo: 85 + top_level;
    }

    states [
        xxx when active_index == 1 : {
            text1.text: "world";
            text1.foo: {
                debug("hello");
                3 + 2 * top_level;
            }
            some_prop: 8;
        }
        yyy when active_index == 2 : {
            text1.foo: 9;
        }
        zzz when false : {
            some_prop: 2000;
        }
    ]

    transitions [
        to zzz: {
            animate * { duration: 88ms; }
        }
        out zzz: {
            animate * { duration: 300ms; }
        }
    ]

    property<int> text1_foo: text1.foo;

}


/*
```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;
assert_eq(instance.get_text1_foo(), 85 + 4);
assert_eq(instance.get_some_prop(), 5);
instance.set_active_index(1);
assert_eq(instance.get_text1_foo(), 3 + 2 * 4);
assert_eq(instance.get_some_prop(), 8);
instance.set_top_level(1);
assert_eq(instance.get_text1_foo(), 3 + 2);
```


```rust
let instance = TestCase::new();
let instance = instance.as_ref();
println!("CHECK {}", instance.get_active_index());
assert_eq!(instance.get_text1_foo(), 85 + 4);
assert_eq!(instance.get_some_prop(), 5);
println!("SETTING TO 1");
instance.set_active_index(1);
assert_eq!(instance.get_text1_foo(), 3 + 2 * 4);
assert_eq!(instance.get_some_prop(), 8);
instance.set_top_level(1);
assert_eq!(instance.get_text1_foo(), 3 + 2);

```

```js
var instance = new sixtyfps.TestCase({});
assert.equal(instance.text1_foo, 85 + 4);
assert.equal(instance.some_prop, 5);
instance.active_index = 1;
assert.equal(instance.text1_foo, 3 + 2 * 4);
assert.equal(instance.some_prop, 8);
instance.top_level = 1;
assert.equal(instance.text1_foo, 3 + 2);
```
*/

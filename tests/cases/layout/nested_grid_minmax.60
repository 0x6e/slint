/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */
// Test the propagation of maximum and minimum size through nested grid layouts

TestCase := Rectangle {
    width: 300phx;
    height: 300phx;

    GridLayout {
        Row {
            GridLayout {
                rect1 := Rectangle {
                    color: red;
                    maximum_width: 50phx;
                    minimum_height: 20phx;
                    maximum_height: 20phx;
                }
                rect2 := Rectangle {
                    row: 0;
                    col: 1;
                    color: blue;
                }
            }
        }
    }

    property <bool> rect1_pos_ok: rect1.x == 0phx && rect1.y == 0phx && rect1.width == 50phx && rect1.height == 20phx;
    property <bool> rect2_pos_ok: rect2.x == 50phx && rect2.y == 0phx && rect2.width == 250phx && rect2.height == 20phx;
}

/*

```cpp
TestCase instance;
TestCase::apply_layout({&TestCase::component_type, &instance }, sixtyfps::Rect{0, 0, 300, 300});
assert(instance.get_rect1_pos_ok());
assert(instance.get_rect2_pos_ok());
```


```rust
let instance = TestCase::new();
let instance = instance.as_ref();
use sixtyfps::re_exports::Component;
instance.apply_layout(sixtyfps::re_exports::Rect::new(Default::default(), sixtyfps::re_exports::Size::new(300., 300.)));
assert!(instance.get_rect1_pos_ok());
assert!(instance.get_rect2_pos_ok());
```

// FIXME:: interpreter test

*/
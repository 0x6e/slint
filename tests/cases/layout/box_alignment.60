/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */

MyWid := Rectangle {
    minimum-width: 20phx;
    minimum-height: 20phx;
    horizontal-stretch:0;
    vertical-stretch:0;
}


TestCase := Rectangle {
    width: 300phx;
    height: 300phx;

    VerticalLayout {
        alignment: end;
        padding: 0phx;
        spacing: 5phx;
        HorizontalLayout {
            padding: 0phx;
            spacing: 2phx;
            alignment: start;
            rs1 := MyWid { color: blue; }
            rs2 := MyWid { color: red; }
            rs3 := MyWid { color: yellow; }
        }
        HorizontalLayout {
            padding: 0phx;
            spacing: 2phx;
            alignment: space-between;
            rb1 := MyWid { color: green; }
            rb2 := MyWid { color: black; }
            rb3 := MyWid { color: orange; }
        }
        HorizontalLayout {
            padding: 0phx;
            spacing: 2phx;
            alignment: space-around;
            ra1 := MyWid { color: pink; }
            ra2 := MyWid { color: lightblue; }
            ra3 := MyWid { color: gray; }
        }
        HorizontalLayout {
            padding: 0phx;
            spacing: 2phx;
            alignment: center;
            rc1 := MyWid { color: violet; }
            rc2 := MyWid { color: lightgreen; }
            rc3 := MyWid { color: purple; }
        }
    }

    // check the vertical layout
    property <bool> v1: rs1.y == height - (4*20phx + 15phx) && rs1.y == rs2.y && rs1.y == rs3.y;
    property <bool> v2: rb1.y == height - (3*20phx + 10phx) && rb1.y == rb2.y && rb1.y == rb3.y;
    property <bool> v3: ra1.y == height - (2*20phx + 5phx) && ra1.y == ra2.y && ra1.y == ra3.y;
    property <bool> v4: rc1.y == height - (1*20phx + 0phx) && rc1.y == rc2.y && rc1.y == rc3.y;

    // check the horizontal layout
    property <bool> s1: rs1.x == 0phx && rs2.x == 22phx && rs3.x == 44phx;
    property <bool> c1: rc1.x == (width - 64phx)/2 && rc2.x == (width - rc2.width)/2 && rc3.x == (width + 64phx)/2 - ra3.width;
    property <bool> b1: rb1.x == 0phx && rb2.x == (width - rb2.width)/2 && rb3.x == width - rb3.width;
}

/*

```cpp
auto handle = TestCase::create();
const TestCase &instance = *handle;
TestCase::apply_layout({&TestCase::static_vtable, const_cast<TestCase*>(&instance) }, sixtyfps::Rect{0, 0, 300, 300});
assert(instance.get_v1());
assert(instance.get_v2());
assert(instance.get_v3());
assert(instance.get_v4());
assert(instance.get_s1());
assert(instance.get_b1());
assert(instance.get_c1());
```


```rust
let instance = TestCase::new();
sixtyfps::testing::apply_layout(&instance, sixtyfps::re_exports::Rect::new(Default::default(), sixtyfps::re_exports::Size::new(300., 300.)));
assert!(instance.get_v1());
assert!(instance.get_v2());
assert!(instance.get_v3());
assert!(instance.get_v4());
assert!(instance.get_s1());
assert!(instance.get_b1());
assert!(instance.get_c1());
```

*/

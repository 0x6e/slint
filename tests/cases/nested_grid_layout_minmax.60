/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */
// Test the propagation of maximum and minimum size through nested grid layouts

TestCase := Rectangle {
    width: 300px;
    height: 300px;

    GridLayout {
        Row {
            GridLayout {
                Row {
                    rect1 := Rectangle {
                        color: red;
                        maximum_width: 50px;
                        minimum_height: 20px;
                        maximum_height: 20px;
                    }
                    rect2 := Rectangle {
                        color: blue;
                    }
                }
            }
        }
    }

    property <bool> rect1_pos_ok: rect1.x == 0px && rect1.y == 0px && rect1.width == 50px && rect1.height == 20px;
    property <bool> rect2_pos_ok: rect2.x == 50px && rect2.y == 0px && rect2.width == 250px && rect2.height == 20px;
}

/*

```cpp
TestCase instance;
TestCase::compute_layout({&TestCase::component_type, &instance });
assert(instance.get_rect1_pos_ok());
assert(instance.get_rect2_pos_ok());
```


```rust
let instance = TestCase::new();
let instance = instance.as_ref();
use sixtyfps::re_exports::Component;
instance.compute_layout();
assert!(instance.get_rect1_pos_ok());
assert!(instance.get_rect2_pos_ok());
```

// FIXME:: interpreter test

*/
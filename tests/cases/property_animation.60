TestCase := Rectangle {
    animate x {
        duration: 1000ms;
    }

    property<int32> hello: 40;
    animate hello {
        duration: 1200ms;
    }

    property<bool> condition: true;
    property<int32> binding_dep: condition ? 100 : 150;
    animate binding_dep {
        duration: 1200ms;
    }

}

/*

```rust
let instance = TestCase::new();
let instance = instance.as_ref();
assert_eq!(instance.get_hello(), 40);
assert_eq!(instance.get_binding_dep(), 100);
instance.set_condition(false);
instance.set_hello(60);
// no time has ellapsed yet
assert_eq!(instance.get_hello(), 40);
assert_eq!(instance.get_binding_dep(), 100);

// Half the animation
sixtyfps::testing::ellapse_time(600);
assert_eq!(instance.get_hello(), 50);
assert_eq!(instance.get_binding_dep(), 125);


// Remaining half
sixtyfps::testing::ellapse_time(600);
assert_eq!(instance.get_hello(), 60);
assert_eq!(instance.get_binding_dep(), 150);

sixtyfps::testing::ellapse_time(100);
assert_eq!(instance.get_hello(), 60);
assert_eq!(instance.get_binding_dep(), 150);
```


```cpp
TestCase instance;
assert(instance.get_hello() == 40);
assert(instance.get_binding_dep() == 100);
instance.set_condition(false);
instance.set_hello(60);
// no time has ellapsed yet
assert(instance.get_hello() == 40);
assert(instance.get_binding_dep() == 100);

// Half the animation
sixtyfps::testing::ellapse_time(600);
assert(instance.get_hello() == 50);
assert(instance.get_binding_dep() == 125);


// Remaining half
sixtyfps::testing::ellapse_time(600);
assert(instance.get_hello() == 60);
assert(instance.get_binding_dep() == 150);

sixtyfps::testing::ellapse_time(100);
assert(instance.get_hello() == 60);
assert(instance.get_binding_dep() == 150);
```



```js
var instance = new sixtyfps.TestCase({});
assert.equal(instance.hello, 40);
assert.equal(instance.binding_dep, 100);
instance.condition = false;
instance.hello = 60;
// no time has ellapsed yet
assert.equal(instance.hello, 40);
assert.equal(instance.binding_dep, 100);

// Half the animation
sixtyfpslib.test_ellapse_time(600);
assert.equal(instance.hello, 50);
assert.equal(instance.binding_dep, 125);
// Remaining half
sixtyfpslib.test_ellapse_time(600);
assert.equal(instance.hello, 60);
assert.equal(instance.binding_dep, 150);
sixtyfpslib.test_ellapse_time(100);
assert.equal(instance.hello, 60);
assert.equal(instance.binding_dep, 150);
```
*/

export Button := Rectangle {
    signal clicked;
    property<string> text;
    property<length> font_size;
    property<bool> pressed: touch_area.pressed;

    border_width: 2lx;
    border_radius: 10lx;
    border_color: black;
    color: touch_area.pressed ? #ddd : #eee;
    animate color { duration: 100ms; }

    maximum_height: 40lx;
    minimum_height: 40lx;
    minimum_width: 120lx;

    Text {
        text: root.text;
        font_size: root.font_size;
        y: root.border_radius;
        x: root.border_radius;
        color: black;
        width: touch_area.width;
        height: touch_area.height;
        horizontal_alignment: align_center;
        vertical_alignment: align_center;
    }

    touch_area := TouchArea {
        x: root.border_radius;
        y: root.border_radius;
        width: root.width - 2 * root.border_radius;
        height: root.height - 2 * root.border_radius;
        clicked => { root.clicked() }
    }
}

export CheckBox := Rectangle {
    signal toggled;
    property <string> text;
    property <bool> checked;

    maximum_height: 40lx;
    minimum_height: 40lx;
    minimum_width: 120lx;

    // the check box iteself
    indicator := Rectangle {
        height: root.height;
        width: root.height * 2;
        border_width: 2lx;
        border_radius: root.height / 2;
        border_color: black;
        color: touch_area.pressed? #ddd : #eee;
        animate color { duration: 100ms; }

        bubble := Rectangle {
            width: root.height - 8lx;
            height: bubble.width;
            border_radius: bubble.height / 2;
            y: 4lx;
            x: root.checked ? 4lx : indicator.width - bubble.width - 4lx;
            color: root.checked ? #aea : #eaa;
            animate x, color { duration: 200ms; easing: ease;}
        }
    }

    Text {
        x: indicator.width + 2lx;
        text: root.text;
        color: black;
    }

    touch_area := TouchArea {
        width: root.width;
        height: root.height;
        clicked => {
            root.checked = !root.checked;
            root.toggled();
        }
    }

}


SpinBoxButton := Rectangle {
    signal clicked;
    property<string> text;
    property <length> font_size;
    border_width: 2lx;
    border_radius: 10lx;
    border_color: black;
    color: touch.pressed ? #ddd : #eee;
    animate color { duration: 100ms; }
    touch := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => { root.clicked(); }
    }
    Text {
        x: parent.width / 2 - 15lx + (touch.pressed ? 1lx : 0lx) ;
        y: parent.height / 2 - 15lx + (touch.pressed ? 1lx : 0lx);
        text: root.text;
        font_size: root.font_size;
        color: black;
    }
}

export SpinBox := Rectangle {
    signal toggled;
    property <string> text;
    property <bool> checked;
    property <int> value;
    property <length> font_size;
    color: white;

    maximum_height: 40lx;
    minimum_height: 40lx;
    minimum_width: 120lx;

    SpinBoxButton {
        text: "-";
        font_size: root.font_size;
        clicked => { root.value -= 1; }
        width: parent.height;
        height: parent.height;
    }

    plus_button := SpinBoxButton {
        width: parent.height;
        height: parent.height;
        x: parent.width - self.width;
        font_size: root.font_size;
        text: "+";
        clicked => { root.value += 1; }
    }

    Text {
        text: root.value;
        font_size: root.font_size;
        x: parent.height + 15lx;
        width: plus_button.x - self.x - 15lx;
        horizontal_alignment: align_center;
        color: black;
    }
}

export Slider := Rectangle {
    property<float> max: 100;
    property<float> min: 0;
    property<float> value;

    maximum_height: 40lx;
    minimum_height: 40lx;
    minimum_width: 120lx;

    slider := Rectangle {
        width: parent.width;
        y: parent.height / 3;
        height: parent.height / 3;
        border_width: 2lx;
        border_radius: self.height / 2;
        border_color: black;
        color: #eee;
    }

    handle := Rectangle {
        width: parent.height / 3;
        height: parent.height;
        border_width: 2lx;
        border_radius: self.width / 2;
        border_color: black;
        color: touch_area.pressed ? #ddd : #eee;
        animate color { duration: 100ms; }
        x: (root.width - handle.width) * (new_value - min)/(max - min);
        property<float> new_value_tmp : touch_area.pressed
            ? root.value + (touch_area.mouse_x - touch_area.pressed_x) * (max - min) / (root.width - handle.width)
            : root.value;
        property<float> new_value : new_value_tmp < root.min ? root.min
            : new_value_tmp > root.max ? root.max : new_value_tmp;
    }
    touch_area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            root.value = handle.new_value;
        }
    }
}

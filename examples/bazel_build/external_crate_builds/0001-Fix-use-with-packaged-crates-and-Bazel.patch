# Copyright Â© 2025 SixtyFPS GmbH
# SPDX-License-Identifier: MIT

# See https://github.com/bkchr/proc-macro-crate/pull/55

From 47d918dc6575e5a6302ce32780cf6e5fd32518fd Mon Sep 17 00:00:00 2001
From: Simon Hausmann <simon.hausmann@slint.dev>
Date: Sun, 5 Jan 2025 10:12:35 +0100
Subject: [PATCH] Fix use with packaged crates and Bazel

When the application is built with Bazel as build system, environment
variables like CARGO_MANIFEST_DIR, etc. are set for compatibility, but
CARGO itself isn't, because Bazel is the tool of choice. Therefore any
attempt to invoke Cargo to locate the workspace manifest path fails.

Using proc-macro-crate with crates that are using Cargo workspaces makes
indeed only sense when Cargo is the build system. But when the crates
are packaged, then we don't even need to invoke cargo anyway to locate
a workspace, as there can't be any.

This speeds up the general build and makes it possible to use
proc-macro-crate with Bazel builds.
---
 src/lib.rs | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/lib.rs b/src/lib.rs
index fe46eb3..45339f3 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -241,6 +241,11 @@ pub fn crate_name(orig_name: &str) -> Result<FoundCrate, Error> {
 }
 
 fn workspace_manifest_path(cargo_toml_manifest: &Path) -> Result<Option<PathBuf>, Error> {
+    // Skip invoking Cargo if we're building a crate packaged with cargo.
+    if !cargo_toml_manifest.with_extension(".toml.orig").exists() {
+        return Ok(None);
+    }
+
     let stdout = Command::new(env::var("CARGO").map_err(|_| Error::CargoEnvVariableNotSet)?)
         .arg("locate-project")
         .args(&["--workspace", "--message-format=plain"])
-- 
2.39.5 (Apple Git-154)


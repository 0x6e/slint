
import { SpinBox, Button, CheckBox, Slider } from "sixtyfps_widgets.60";

Label := Text {
    color: black;
    font_size: 28lx;
}

Page := Rectangle {
    color: white;
    animate y { duration: 300ms; easing: ease_out; }
}

CopyPage := Page {

    preview := Image {
        x: 40lx;
        y: 20lx;
        source: img!"images/cat_preview_round.png";
        width: 320lx;
        height: 480lx;        
    }

    copies_label := Label {
        x: preview.x + preview.width + 20lx;
        y: preview.y + 10lx;
        width: root.width - self.x - 40lx;
        height: 40lx;
        text: "Copies:";
    }

    copies_spinbox := SpinBox {
        x: copies_label.x;
        y: copies_label.y + copies_label.height + 10lx;
        width: copies_label.width;
        height: copies_label.height;
        font_size: 28lx;
    }

    Button {
        text: "Print Page";
        font_size: 28lx;
        x: copies_spinbox.x;
        y: copies_spinbox.y + copies_spinbox.height + 10lx;
        width: copies_spinbox.width;
        height: copies_spinbox.height;
    }

    
}

FaxPage := Page {

    Text {
        x: parent.width / 12;
        y: parent.width / 8;
        color: black;
        text: "Fax";
    }
}

PrintPage := Page {

    Rectangle {
        color: #ddd;
        width: parent.width / 3;
        x: parent.width / 12  ;
        y: parent.width / 8;
        height: parent.width / 2;
        Text {
            color: black;
            text: "Hello";
        }
    }
    Rectangle {
        color: #ddd;
        width: parent.width / 3;
        x: parent.width / 12 + parent.width / 2 ;
        y: parent.width / 8;
        height: parent.width / 2;
        Text {
            color: black;
            text: "Print";
        }
    }
}


SettingsPage := Page {
   GridLayout {
        height: parent.height - 20lx;
        width: parent.width - 20lx;
        x: 10lx;
        y: 10lx;
        spacing: 10lx;
        Row { Rectangle {} }
        Row {
            CheckBox {
                text: "Black and White";
            }
        }
        Row {
            Label { text: "Scan DPI"; }
            Slider {  }
        }
        Row {
            CheckBox { text: "Eco Mode"; }
        }
        Row {
            CheckBox { text: "TURBO"; }
        }
        Row { Rectangle {} }
        Row { Rectangle {} }
        Row { Rectangle {} }
    }
}

TopPanel := Rectangle {
   property<int> active_page: 0;

   color: white;

   title1 := Text {
        text: "PrintMachine";
        color: active_page == 0 ? black : #0000;
        animate color { duration: 200ms; }
        font_size: root.width / 20;
        y: 5lx;
        x: 40lx;
    }
    Text {
        y:  title1.y;
        x: title1.x + title1.font_size*7; //title1.x + title1.width;
        text: "2000";
        color: active_page == 0 ? red : #0000;
        animate color { duration: 200ms; }
        font_size: root.width / 20;
    }

    power_button := Image {
        x: parent.width - self.width - 20lx;
        y: 5lx;
        source: img!"images/power.png";
        width: root.width / 20;
        height: root.width / 20;
    }
}

MainWindow := Window {

    width: 800lx;
    height: 600lx;

    property<int> active_page: 0;

    panel := TopPanel {
        active_page: root.active_page;
        width: root.width;
        height: root.width / 20 + 10lx;
    }

    Image {
        source: img!"images/metallic_toad_background.png";
        y: panel.y + panel.height;
        width: root.width;
        height: root.height - self.y;
    }

    for page_info[idx] in [
        { color: #d11, text: "Copy", img_small: img!"images/replicate.png" },
        { color: #1d1, text: "Fax", img_small: img!"images/laptop.png" },
        { color: #dd0, text: "Print", img_small: img!"images/printer.png" },
        { color: #08d, text: "Settings", img_small: img!"images/list.png" },
    ] : Rectangle {
        width: root.width / 5;
        height: root.height / 3;
        y: root.height / 4;
        x: idx * root.width / 4 + root.width / 45;
        border_radius: 25lx;
        color: page_info.color;
        img := Image {
            y: 5lx;
            x: 5lx;
            width: root.width / 6.25;
            height: root.height / 4.68;
            source: page_info.img_small;
            animate x, y, width, height {
                duration: 300ms;
                easing: ease_in_out;
            }
        }
        text := Text {
            color: #2a2e3b;
            y: root.height / 5;
            x: 5lx;
            width: parent.width;
            height: parent.height;
            horizontal_alignment: align_center;
            text: page_info.text;
            font_size: 28lx;
            animate x, y {
                duration: 300ms;
                easing: ease_in_out;
            }
        }
        touch := TouchArea {
            width: parent.width;
            height: parent.height;
            clicked => {
                if (root.active_page == 0) {
                    root.active_page = idx + 1;
                }
            }
        }

        animate x, y, height, width, color, border_radius {
            duration: 300ms;
            easing: ease_in_out;
        }

        states [
            active when root.active_page == idx + 1: {
                x: 0px;
                y: 0px;
                height: root.height / 8;
                width: root.width;
                border_radius: 0lx;
                img.x: root.height / 8;
                img.width: root.height / 10;
                img.height: root.height / 10;
                text.y: 0px;
                text.x: root.height / 4;
                //text.horizontal_alignment: align_left;
            }
            pressed when root.active_page == 0 && touch.pressed : {
                width: root.width / 5 + 6lx;
                height: root.height / 3 + 6lx ;
                y: root.height / 4 - 3lx;
                x: idx * root.width / 4 + root.width / 45 - 3lx;
                img.x: 8lx;
                img.y: 8lx;
                text.y: root.height / 5 + 5lx;
            }
            invisible when root.active_page > 0 && root.active_page != idx + 1 : {
                color: white;
                // FIXME: should probaby hide the entire item under with z-ordering
                img.y: 1000000000lx;
                text.color: #0000;
            }
        ]
    }

    if (root.active_page != 0) : Rectangle {
        width: root.height / 8;
        height: root.height / 8;
        Text {
             text: "←";
             color: white;
             font_size: root.height / 8;
        }
        TouchArea {
            width: root.height / 8;
            height: root.height / 8;
            clicked => { root.active_page = 0; }
        }
    }


    Rectangle {
        width: root.width / 3;
        height: root.height / 3;
        x: root.width - self.width - 20lx;
        y: root.height - self.height - 20lx;
        color: #eee;

        //GridLayout {
        //    spacing: 20lx;
            for color_info[idx] in [
                {color: #0ff, level: 60%},
                {color: #ff0, level: 80%},
                {color: #f0f, level: 70%},
                {color: #000, level: 30%},
            ] : Rectangle {

                color: white;

    // this should be done by the Layout later
    width: (parent.width - 5*10lx) / 4;
    height: parent.height - 20lx;
    y: 10lx;
    x: 10lx + (self.width + 10lx) * idx;

                Rectangle {
                    width: parent.width;
                    height: tentative_height > parent.height * color_info.level ? parent.height * color_info.level: tentative_height;
                    property <length> tentative_height: root.active_page == 0 ? parent.height * color_info.level : 0px;
                    animate tentative_height { duration: 750ms; easing: ease_in_out; }
                    y: parent.height - self.height;
                    color: color_info.color;
                }
            }
        //}

        property <bool> full_screen;
        states [
            full_screen when full_screen : {
                width: root.width - 35lx;
                height: 7/8 * root.height - 40lx ;
            }
        ]
        animate width, height { duration: 200ms; easing: ease;  }
        TouchArea {
            width: parent.width;
            height: parent.height;
            clicked => {
                if (active_page == 0) {
                    parent.full_screen = !parent.full_screen;
                }
            }
        }
    }

    CopyPage {
        height: root.height - root.height / 8;
        width: root.width;
        y: root.height;
        states [
            active when root.active_page == 1: {
                y: root.height / 8;
            }
        ]
    }

    FaxPage {
        height: root.height - root.height / 8;
        width: root.width;
        y: root.height;
        states [
            active when root.active_page == 2: {
                y: root.height / 8;
            }
        ]
    }

    PrintPage {
        height: root.height - root.height / 8;
        width: root.width;
        y: root.height;
        states [
            active when root.active_page == 3: {
                y: root.height / 8;
            }
        ]
    }

    SettingsPage {
        height: root.height - root.height / 8;
        width: root.width;
        y: root.height;
        states [
            active when root.active_page == 4: {
                y: root.height / 8;
            }
        ]
    }
}


/* LICENSE BEGIN
    This file is part of the SixtyFPS Project -- https://sixtyfps.io
    Copyright (c) 2020 Olivier Goffart <olivier.goffart@sixtyfps.io>
    Copyright (c) 2020 Simon Hausmann <simon.hausmann@sixtyfps.io>

    SPDX-License-Identifier: GPL-3.0-only
    This file is also available under commercial licensing terms.
    Please contact info@sixtyfps.io for more information.
LICENSE END */

export Button := Rectangle {
    signal clicked;
    property<string> text;
    property<length> font_size;
    property<bool> pressed: touch_area.pressed;

    border_width: 2lx;
    border_radius: 10lx;
    border_color: black;
    color: touch_area.pressed ? #556884 : lightgray;
    animate color { duration: 100ms; }

    maximum_height: 40lx;
    minimum_height: 40lx;
    minimum_width: 120lx;

    Text {
        text: root.text;
        font_size: root.font_size;
        y: root.border_radius;
        x: root.border_radius;
        width: root.width - 2 * root.border_radius;
        height: root.height - 2 * root.border_radius;
        horizontal_alignment: align_center;
        vertical_alignment: align_center;
    }

    touch_area := TouchArea {
        width: root.width;
        height: root.height;
        clicked => { root.clicked() }
    }
}

export CheckBox := Rectangle {
    signal toggled;
    property <string> text;
    property <bool> checked;

    maximum_height: 40lx;
    minimum_height: 40lx;
    minimum_width: 120lx;

    // the check box iteself
    indicator := Rectangle {
        height: root.height;
        width: root.height * 2;
        border_width: 2lx;
        border_radius: root.height / 2;
        border_color: black;
        color: white;
        animate color { duration: 100ms; }

        bubble := Rectangle {
            width: root.height - 8lx;
            height: bubble.width;
            border_radius: bubble.height / 2;
            y: 4lx;
            x: 4lx + a * (indicator.width - bubble.width - 8lx);
            property <float> a: root.checked ? 1 : 0;
            color: root.checked ? #556884 : lightgray;
            animate a, color { duration: 200ms; easing: ease;}
        }
    }

    Text {
        x: indicator.width + 8lx;
        text: root.text;
        vertical_alignment: align_center;
        width: parent.width - self.x;
        height: parent.height;
    }

    touch_area := TouchArea {
        width: root.width;
        height: root.height;
        clicked => {
            root.checked = !root.checked;
            root.toggled();
        }
    }

}


SpinBoxButton := Rectangle {
    signal clicked;
    property<string> text;
    property <length> font_size;
    border_width: 2lx;
    border_radius: 10lx;
    border_color: black;
    color: touch.pressed ? #556884 : lightgray;
    animate color { duration: 100ms; }
    touch := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => { root.clicked(); }
    }
    Text {
        x: touch.pressed ? 1lx : 0lx;
        y: touch.pressed ? 1lx : 0lx;
        width: parent.width;
        height: parent.height;
        vertical_alignment: align_center;
        horizontal_alignment: align_center;
        text: root.text;
        font_size: root.font_size;
    }
}

export SpinBox := Rectangle {
    signal toggled;
    property <string> text;
    property <bool> checked;
    property <int> value;
    property <length> font_size;
    color: white;

    maximum_height: 40lx;
    minimum_height: 40lx;
    minimum_width: 120lx;

    SpinBoxButton {
        text: "-";
        font_size: root.font_size;
        clicked => { root.value -= 1; }
        width: parent.height;
        height: parent.height;
    }

    plus_button := SpinBoxButton {
        width: parent.height;
        height: parent.height;
        x: parent.width - self.width;
        font_size: root.font_size;
        text: "+";
        clicked => { root.value += 1; }
    }

    Text {
        text: root.value;
        font_size: root.font_size;
        x: parent.height + 15lx;
        width: plus_button.x - self.x - 15lx;
        height: parent.height;
        horizontal_alignment: align_center;
        vertical_alignment: align_center;
    }
}

export Slider := Rectangle {
    property<float> max: 100;
    property<float> min: 0;
    property<float> value;

    maximum_height: 40lx;
    minimum_height: 40lx;
    minimum_width: 120lx;

    slider_filled := Rectangle {
        width: parent.width;
        y: parent.height / 3;
        height: parent.height / 3;
        border_width: 2lx;
        border_radius: self.height / 2;
        border_color: black;
        color: #556884;
    }

    slider_empty := Rectangle {
        y: slider_filled.y;
        x: handle.x;
        width: parent.width - self.x;
        height: slider_filled.height;
        border_width: slider_filled.border_width;
        border_radius: slider_filled.border_radius;
        border_color: slider_filled.border_color;
        color: lightgray;
    }

    handle := Rectangle {
        width: parent.height / 3;
        height: parent.height;
        border_width: 2lx;
        border_radius: self.width / 2;
        border_color: black;
        color: touch_area.pressed ? #556884 : white;
        animate color { duration: 100ms; }
        x: (root.width - handle.width) * (new_value - min)/(max - min);
        property<float> new_value_tmp : touch_area.pressed
            ? root.value + (touch_area.mouse_x - touch_area.pressed_x) * (max - min) / (root.width - handle.width)
            : root.value;
        property<float> new_value : new_value_tmp < root.min ? root.min
            : new_value_tmp > root.max ? root.max : new_value_tmp;
    }
    touch_area := TouchArea {
        width: parent.width;
        height: parent.height;
        clicked => {
            root.value = handle.new_value;
        }
    }
}

export GroupBox := GridLayout {
    property <string> title;
    spacing: 5lx;
    Row {
        Text {
            text: root.title;
        }
    }
    Row {
        Rectangle {
            border_width: 1lx;
            border_color: #d0d3cf;
            border_radius: 3lx;
            color: white;

            GridLayout {
                padding: 10lx;
                $children
            }
        }
    }
}

export LineEdit := Rectangle {
    property <string> text;
    property <bool> has_focus: input.has_focus;
    signal accepted(string);

    border_color: root.has_focus ? #556884 : #ffffff;
    border_radius: 1lx;
    border_width: 2lx;

    GridLayout {
        padding: 3lx;

        Rectangle {
            border_color: #ecedeb;
            border_radius: 1lx;
            border_width: 1lx;
            color: white;

            GridLayout {
                padding: 3lx;
                input := TextInput {
                    text <=> root.text;
                    accepted => {
                        root.accepted(self.text);
                    }
                }
           }
        }
    }
}

export ScrollView := Rectangle {
    property <length> viewport_width;
    property <length> viewport_height;
    border_width: 1lx;
    border_color: #d0d3cf;
    color: white;
    Flickable {
        width: parent.width;
        height: parent.height;
        viewport_width: parent.viewport_width;
        viewport_height: parent.viewport_height;
        $children
    }
}